#ifndef ACUTILSTEST_ACHECK_H
#define ACUTILSTEST_ACHECK_H

#include "check.h"

#define ACUTILS_ASSERT(expr) ck_assert(expr)
#define ACUTILS_ASSERT_MSG(expr, ...) ck_assert_msg(expr, __VA_ARGS__)

#define ACUTILS_ASSERT_DOUBLE_FINITE(X) ck_assert_double_finite(X)
#define ACUTILS_ASSERT_DOUBLE_INFINITE(X) ck_assert_double_infinite(X)
#define ACUTILS_ASSERT_DOUBLE_NAN(X) ck_assert_double_nan(X)
#define ACUTILS_ASSERT_DOUBLE_NONNAN(X) ck_assert_double_nonnan(X)
#define ACUTILS_ASSERT_DOUBLE_EQ(X, Y) ck_assert_double_eq(X, Y)
#define ACUTILS_ASSERT_DOUBLE_EQ_TOL(X, Y, T) ck_assert_double_eq_tol(X, Y, T)
#define ACUTILS_ASSERT_DOUBLE_NE(X, Y) ck_assert_double_ne(X, Y)
#define ACUTILS_ASSERT_DOUBLE_NE_TOL(X, Y, T) ck_assert_double_ne_tol(X, Y, T)
#define ACUTILS_ASSERT_DOUBLE_GE(X, Y) ck_assert_double_ge(X, Y)
#define ACUTILS_ASSERT_DOUBLE_GE_TOL(X, Y, T) ck_assert_double_ge_tol(X, Y, T)
#define ACUTILS_ASSERT_DOUBLE_LE(X, Y) ck_assert_double_le(X, Y)
#define ACUTILS_ASSERT_DOUBLE_LE_TOL(X, Y, T) ck_assert_double_le_tol(X, Y, T)
#define ACUTILS_ASSERT_DOUBLE_GT(X, Y) ck_assert_double_gt(X, Y)
#define ACUTILS_ASSERT_DOUBLE_LT(X, Y) ck_assert_double_lt(X, Y)

#define ACUTILS_ASSERT_LDOUBLE_FINITE(X) ck_assert_ldouble_finite(X)
#define ACUTILS_ASSERT_LDOUBLE_INFINITE(X) ck_assert_ldouble_infinite(X)
#define ACUTILS_ASSERT_LDOUBLE_NAN(X) ck_assert_ldouble_nan(X)
#define ACUTILS_ASSERT_LDOUBLE_NONNAN(X) ck_assert_ldouble_nonnan(X)
#define ACUTILS_ASSERT_LDOUBLE_EQ(X, Y) ck_assert_ldouble_eq(X, Y)
#define ACUTILS_ASSERT_LDOUBLE_EQ_TOL(X, Y, T) ck_assert_ldouble_eq_tol(X, Y, T)
#define ACUTILS_ASSERT_LDOUBLE_NE(X, Y) ck_assert_ldouble_ne(X, Y)
#define ACUTILS_ASSERT_LDOUBLE_NE_TOL(X, Y, T) ck_assert_ldouble_ne_tol(X, Y, T)
#define ACUTILS_ASSERT_LDOUBLE_GE(X, Y) ck_assert_ldouble_ge(X, Y)
#define ACUTILS_ASSERT_LDOUBLE_GE_TOL(X, Y, T) ck_assert_ldouble_ge_tol(X, Y, T)
#define ACUTILS_ASSERT_LDOUBLE_LE(X, Y) ck_assert_ldouble_le(X, Y)
#define ACUTILS_ASSERT_LDOUBLE_LE_TOL(X, Y, T) ck_assert_ldouble_le_tol(X, Y, T)
#define ACUTILS_ASSERT_LDOUBLE_GT(X, Y) ck_assert_ldouble_gt(X, Y)
#define ACUTILS_ASSERT_LDOUBLE_LT(X, Y) ck_assert_ldouble_lt(X, Y)

#define ACUTILS_ASSERT_FLOAT_FINITE(X) ck_assert_float_finite(X)
#define ACUTILS_ASSERT_FLOAT_INFINITE(X) ck_assert_float_infinite(X)
#define ACUTILS_ASSERT_FLOAT_NAN(X) ck_assert_float_nan(X)
#define ACUTILS_ASSERT_FLOAT_NONNAN(X) ck_assert_float_nonnan(X)
#define ACUTILS_ASSERT_FLOAT_EQ(X, Y) ck_assert_float_eq(X, Y)
#define ACUTILS_ASSERT_FLOAT_EQ_TOL(X, Y, T) ck_assert_float_eq_tol(X, Y, T)
#define ACUTILS_ASSERT_FLOAT_NE(X, Y) ck_assert_float_ne(X, Y)
#define ACUTILS_ASSERT_FLOAT_NE_TOL(X, Y, T) ck_assert_float_ne_tol(X, Y, T)
#define ACUTILS_ASSERT_FLOAT_GE(X, Y) ck_assert_float_ge(X, Y)
#define ACUTILS_ASSERT_FLOAT_GE_TOL(X, Y, T) ck_assert_float_ge_tol(X, Y, T)
#define ACUTILS_ASSERT_FLOAT_LE(X, Y) ck_assert_float_le(X, Y)
#define ACUTILS_ASSERT_FLOAT_LE_TOL(X, Y, T) ck_assert_float_le_tol(X, Y, T)
#define ACUTILS_ASSERT_FLOAT_GT(X, Y) ck_assert_float_gt(X, Y)
#define ACUTILS_ASSERT_FLOAT_LT(X, Y) ck_assert_float_lt(X, Y)

#define ACUTILS_ASSERT_INT_EQ(X, Y) ck_assert_int_eq(X, Y)
#define ACUTILS_ASSERT_INT_NE(X, Y) ck_assert_int_ne(X, Y)
#define ACUTILS_ASSERT_INT_GT(X, Y) ck_assert_int_gt(X, Y)
#define ACUTILS_ASSERT_INT_LT(X, Y) ck_assert_int_lt(X, Y)
#define ACUTILS_ASSERT_INT_GE(X, Y) ck_assert_int_ge(X, Y)
#define ACUTILS_ASSERT_INT_LE(X, Y) ck_assert_int_le(X, Y)

#define ACUTILS_ASSERT_UINT_EQ(X, Y) ck_assert_uint_eq(X, Y)
#define ACUTILS_ASSERT_UINT_NE(X, Y) ck_assert_uint_ne(X, Y)
#define ACUTILS_ASSERT_UINT_GT(X, Y) ck_assert_uint_gt(X, Y)
#define ACUTILS_ASSERT_UINT_LT(X, Y) ck_assert_uint_lt(X, Y)
#define ACUTILS_ASSERT_UINT_GE(X, Y) ck_assert_uint_ge(X, Y)
#define ACUTILS_ASSERT_UINT_LE(X, Y) ck_assert_uint_le(X, Y)

#define ACUTILS_ASSERT_STR_EQ(X, Y) ck_assert_str_eq(X, Y)
#define ACUTILS_ASSERT_STR_NE(X, Y) ck_assert_str_ne(X, Y)
#define ACUTILS_ASSERT_STR_GT(X, Y) ck_assert_str_gt(X, Y)
#define ACUTILS_ASSERT_STR_LT(X, Y) ck_assert_str_lt(X, Y)
#define ACUTILS_ASSERT_STR_GE(X, Y) ck_assert_str_ge(X, Y)
#define ACUTILS_ASSERT_STR_LE(X, Y) ck_assert_str_le(X, Y)

#define ACUTILS_ASSERT_PSTR_EQ(X, Y) ck_assert_pstr_eq(X, Y)
#define ACUTILS_ASSERT_PSTR_NE(X, Y) ck_assert_pstr_ne(X, Y)

#define ACUTILS_ASSERT_MEM_EQ(X, Y) ck_assert_mem_eq((void*) X, (void*) Y)
#define ACUTILS_ASSERT_MEM_NE(X, Y) ck_assert_mem_ne((void*) X, (void*) Y)
#define ACUTILS_ASSERT_MEM_GT(X, Y) ck_assert_mem_gt((void*) X, (void*) Y)
#define ACUTILS_ASSERT_MEM_LT(X, Y) ck_assert_mem_lt((void*) X, (void*) Y)
#define ACUTILS_ASSERT_MEM_GE(X, Y) ck_assert_mem_ge((void*) X, (void*) Y)
#define ACUTILS_ASSERT_MEM_LE(X, Y) ck_assert_mem_le((void*) X, (void*) Y)

#define ACUTILS_ASSERT_PTR_NULL(X) ck_assert_ptr_null((void*) X)
#define ACUTILS_ASSERT_PTR_NONNULL(X) ck_assert_ptr_nonnull((void*) X)
#define ACUTILS_ASSERT_PTR_EQ(X, Y) ck_assert_ptr_eq((void*) X, (void*) Y)
#define ACUTILS_ASSERT_PTR_NE(X, Y) ck_assert_ptr_ne((void*) X, (void*) Y)

#endif /* ACUTILSTEST_ACHECK_H */
